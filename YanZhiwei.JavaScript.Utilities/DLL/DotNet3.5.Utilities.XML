<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNet3.5.Utilities</name>
    </assembly>
    <members>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Common.AssemblyHelper">
            <summary>
            程序集反射辅助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.AssemblyHelper.FindAllPropertyByAttribute``1">
            <summary>
            扫描程序集找到带有某个Attribute的所有PropertyInfo
            </summary>
            <typeparam name="T"></typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.AssemblyHelper.FindAllPropertyByAttribute``1(System.String)">
            <summary>
            扫描程序集找到带有某个Attribute的所有PropertyInfo
            </summary>
            <typeparam name="T">反省</typeparam>
            <param name="searchpattern">文件名过滤</param>
            <returns>字典</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.AssemblyHelper.FindAllTypeByAttribute``1">
            <summary>
            扫描程序集找到类型上带有某个Attribute的所有类型
            </summary>
            <typeparam name="T">反省</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.AssemblyHelper.FindAllTypeByAttribute``1(System.String)">
            <summary>
            扫描程序集找到类型上带有某个Attribute的所有类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchpattern">文件名过滤</param>
            <returns>字典</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.AssemblyHelper.FindTypeByInheritType(System.Type)">
            <summary>
            扫描程序集找到继承了某基类的所有子类
            </summary>
            <param name="inheritType">基类</param>
            <returns>子类集合</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.AssemblyHelper.FindTypeByInheritType(System.Type,System.String)">
            <summary>
            扫描程序集找到继承了某基类的所有子类
            </summary>
            <param name="inheritType">基类</param>
            <param name="searchpattern">文件名过滤</param>
            <returns>子类集合</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.AssemblyHelper.FindTypeByInterface``1">
            <summary>
            扫描程序集找到实现了某个接口的第一个实例
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>类型</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.AssemblyHelper.FindTypeByInterface``1(System.String)">
            <summary>
            扫描程序集找到实现了某个接口的第一个实例
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="searchpattern">文件名过滤</param>
            <returns>类型</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.AssemblyHelper.GetBaseDirectory">
            <summary>
            得到当前应用程序的根目录
            </summary>
            <returns>根目录</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.AssemblyHelper.GetEntryAssembly">
            <summary>
            得到入口程序集，兼容Web和Winform
            </summary>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.AssemblyHelper.GetLoadableTypes(System.Reflection.Assembly)">
            <summary>
            获取Assembly类型集合
            </summary>
            <param name="assembly">Assembly</param>
            <returns>类型集合</returns>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Common.DisplayNameHelper">
            <summary>
            获取[DisplayName]辅助类
            </summary>
            时间:2016/10/15 23:31
            备注:
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.DisplayNameHelper.Get``1(System.String)">
            <summary>
            获取[DisplayName]名称
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="propertyName">需要获取[DisplayName]的属性</param>
            <returns>[DisplayName]</returns>
            时间:2016/10/15 23:36
            备注:
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.DisplayNameHelper.Get(System.Type,System.String)">
            <summary>
            获取[DisplayName]名称
            </summary>
            <param name="type">类型</param>
            <param name="propertyName">需要获取[DisplayName]的属性</param>
            <returns>[DisplayName]</returns>
            时间:2016/10/15 23:37
            备注:
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.DisplayNameHelper.Get(System.Reflection.PropertyInfo)">
            <summary>
            获取[DisplayName]名称
            </summary>
            <param name="property">PropertyInfo</param>
            <returns>[DisplayName]</returns>
            时间:2016/10/15 23:37
            备注:
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.DisplayNameHelper.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取[DisplayName]名称
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="keySelector">选择表达式</param>
            <returns>[DisplayName]</returns>
            时间:2016/10/15 23:42
            备注:
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Common.GuidHelper">
            <summary>
            Guid帮助类
            </summary>
            时间：2016-01-11 9:20
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.GuidHelper.TryParse(System.String)">
            <summary>
            将Guid字符串转换为Guid
            </summary>
            <param name="guidString">字符串</param>
            <returns>Guid</returns>
            时间：2016-01-11 9:20
            备注：
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Common.IDataReaderHelper">
            <summary>
            IDataReader 帮助类
            </summary>
            时间：2016-01-05 16:54
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.IDataReaderHelper.GetNullableBool(System.Data.IDataRecord,System.String)">
            <summary>
             从IDataReader获取值
            </summary>
            <param name="reader">IDataReader</param>
            <param name="columnName">列名称</param>
            <returns>T?</returns>
            时间：2016-01-05 16:54
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.IDataReaderHelper.GetNullableByte(System.Data.IDataRecord,System.String)">
            <summary>
             从IDataReader获取值
            </summary>
            <param name="reader">IDataReader</param>
            <param name="columnName">列名称</param>
            <returns>T?</returns>
            时间：2016-01-05 16:54
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.IDataReaderHelper.GetNullableDateTime(System.Data.IDataRecord,System.String)">
            <summary>
             从IDataReader获取值
            </summary>
            <param name="reader">IDataReader</param>
            <param name="columnName">列名称</param>
            <returns>T?</returns>
            时间：2016-01-05 16:54
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.IDataReaderHelper.GetNullableDouble(System.Data.IDataRecord,System.String)">
            <summary>
             从IDataReader获取值
            </summary>
            <param name="reader">IDataReader</param>
            <param name="columnName">列名称</param>
            <returns>T?</returns>
            时间：2016-01-05 16:54
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.IDataReaderHelper.GetNullableFloat(System.Data.IDataRecord,System.String)">
            <summary>
             从IDataReader获取值
            </summary>
            <param name="reader">IDataReader</param>
            <param name="columnName">列名称</param>
            <returns>T?</returns>
            时间：2016-01-05 16:54
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.IDataReaderHelper.GetNullableInt16(System.Data.IDataRecord,System.String)">
            <summary>
             从IDataReader获取值
            </summary>
            <param name="reader">IDataReader</param>
            <param name="columnName">列名称</param>
            <returns>T?</returns>
            时间：2016-01-05 16:54
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.IDataReaderHelper.GetNullableInt32(System.Data.IDataRecord,System.String)">
            <summary>
             从IDataReader获取值
            </summary>
            <param name="reader">IDataReader</param>
            <param name="columnName">列名称</param>
            <returns>T?</returns>
            时间：2016-01-05 16:54
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.IDataReaderHelper.GetNullableString(System.Data.IDataRecord,System.String)">
            <summary>
            从IDataReader获取值
            </summary>
            <param name="reader">IDataReader</param>
            <param name="columnName">列名称</param>
            <returns>数值</returns>
            时间：2016-01-05 16:51
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.IDataReaderHelper.GetValueOrNull``1(System.Data.IDataReader,System.String)">
            <summary>
             从IDataReader获取值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="reader">IDataReader</param>
            <param name="columnName">列名称</param>
            <returns>T?</returns>
            时间：2016-01-05 16:31
            备注：
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Common.PageHelper">
            <summary>
            分页帮助类
            </summary>
            时间：2016-01-06 16:51
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.PageHelper.ToPagedList``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            转换为PagedList集合
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="allItems">IQueryable</param>
            <param name="pageIndex">分页索引</param>
            <param name="pageSize">分页大小</param>
            <returns>PagedList集合</returns>
            时间：2016-01-06 16:51
            备注：
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Common.TypeHelper">
            <summary>
            类型<see cref="T:System.Type"/>辅助扩展方法类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.TypeHelper.AttributeExists``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            检查指定指定类型成员中是否存在指定的Attribute特性
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="memberInfo">要检查的类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.TypeHelper.AttributeExists``1(System.Reflection.MemberInfo)">
            <summary>
            检查指定指定类型成员中是否存在指定的Attribute特性
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="memberInfo">要检查的类型成员</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.TypeHelper.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>存在返回第一个，不存在返回null</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.TypeHelper.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <returns>存在返回第一个，不存在返回null</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.TypeHelper.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>返回所有指定Attribute特性的数组</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.TypeHelper.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <returns>返回所有指定Attribute特性的数组</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.TypeHelper.GetNonNummableType(System.Type)">
            <summary>
            由类型的Nullable类型返回实际类型
            </summary>
            <param name="type"> 要处理的类型对象 </param>
            <returns> </returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.TypeHelper.GetUnNullableType(System.Type)">
            <summary>
            通过类型转换器获取Nullable类型的基础类型
            </summary>
            <param name="type"> 要处理的类型对象 </param>
            <returns> </returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.TypeHelper.IsEnumerable(System.Type)">
            <summary>
            判断类型是否为集合类型
            </summary>
            <param name="type">要处理的类型</param>
            <returns>是返回True，不是返回False</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.TypeHelper.IsGenericAssignableFrom(System.Type,System.Type)">
            <summary>
            判断当前泛型类型是否可由指定类型的实例填充
            </summary>
            <param name="genericType">泛型类型</param>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.TypeHelper.IsNullableType(System.Type)">
            <summary>
            判断类型是否为Nullable类型
            </summary>
            <param name="type"> 要处理的类型 </param>
            <returns> 是返回True，不是返回False </returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.TypeHelper.ToDescription(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取成员元数据的Description特性描述信息
            </summary>
            <param name="member">成员元数据对象</param>
            <param name="inherit">是否搜索成员的继承链以查找描述特性</param>
            <returns>返回Description特性描述信息，如不存在则返回成员的名称</returns>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Common.WcfServiceProxy">
            <summary>
            Wcf帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.WcfServiceProxy.CreateServiceProxy``1(System.String)">
            <summary>
            动态创建Wcf客户端代理实例
            </summary>
            <typeparam name="T">Contract/接口</typeparam>
            <param name="uri">Wcf服务地址</param>
            <returns>代理实例</returns>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Common.EnumerableHelper">
            <summary>
            Enumerable帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.EnumerableHelper.ContainsIgnoreCase(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            集合包含忽略大小写比对
            </summary>
            <param name="items">String类型集合</param>
            <param name="data">需要判断字符串</param>
            <returns>是否包含</returns>
            时间：2016/6/16 11:03
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.EnumerableHelper.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断IEnumerable是否是空
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="items">The items.</param>
            <returns>是否为空</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.EnumerableHelper.NullToEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            如果等于NULL则返回默认初始化集合
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="source">集合</param>
            <returns></returns>
            时间：2015-12-15 14:39
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.EnumerableHelper.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            根据设定的大小分割集合
            <para>
            eg: IEnumerable'IEnumerable'Person'' _acutal = _persons.Split(5);
            </para>
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="source">集合</param>
            <param name="size">分割大小</param>
            <returns>分割后的集合</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.EnumerableHelper.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转换为HashSet
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="source">集合</param>
            <returns>HashSet</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.EnumerableHelper.Traverse``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            递归扩展
            <para>
            eg:List _findedList = allZtree.Traverse(n => n.children).Where(c => c.type == "Road").ToList();
            </para>
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="source">集合</param>
            <param name="fnRecurse">委托</param>
            <returns>集合</returns>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Common.ExpressionHelper">
            <summary>
            Expression 帮助类
            </summary>
            创建时间:2015-05-26 13:50
            备注说明:<c>null</c>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.ExpressionHelper.GetTPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取属性名称
            </summary>
            <typeparam name="T">泛型</typeparam>
            <typeparam name="TProperty">属性</typeparam>
            <param name="keySelector">委托</param>
            <returns>属性名称</returns>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Common.IPropertyChangedHelper">
            <summary>
            INotifyPropertyChanged 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.IPropertyChangedHelper.NotifyPropertyChanged``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            属性更改通知到客户端
            </summary>
            <typeparam name="T">泛型</typeparam>
            <typeparam name="TProperty">泛型</typeparam>
            <param name="source">类型，继承NotifyPropertyChanged</param>
            <param name="keySelector">选择器；eg:this.NotifyPropertyChanged(p => p.Name);  </param>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Common.SerializeHelper">
            <summary>
            序列化帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.SerializeHelper.BinaryDeserialize``1(System.Byte[])">
            <summary>
            将使用二进制格式保存的byte数组反序列化成对象
            </summary>
            <param name="deserializeBuffer">byte数组</param>
            <returns>对象</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.SerializeHelper.BinarySerialize``1(``0)">
            <summary>
            将对象使用二进制格式序列化成byte数组
            </summary>
            <param name="serializeData">需要序列化对象</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.SerializeHelper.DataContractDeserialize``1(System.String)">
            <summary>
            利用DataContractSerializer反序列化
            </summary>
            <param name="deserializeString">需要反序列化字符串</param>
            <returns>object</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.SerializeHelper.DataContractSerialize``1(``0)">
            <summary>
            利用DataContractSerializer对象序列化
            </summary>
            <param name="serializeData">需要序列化的对象</param>
            <returns>字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.SerializeHelper.JsonDeserialize``1(System.String)">
            <summary>
            利用JavaScriptSerializer将json字符串反序列化
            </summary>
            <param name="deserializeString">Json字符串</param>
            <returns>object</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.SerializeHelper.JsonSerialize``1(``0,System.Web.Script.Serialization.JavaScriptConverter[])">
            <summary>
            利用JavaScriptSerializer将对象序列化成JSON字符串
            </summary>
            <param name="serializeData">需要序列化的对象</param>
            <param name="scriptConverters">JavaScriptConverter</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.SerializeHelper.JsonSerialize``1(``0)">
            <summary>
            利用JavaScriptSerializer将对象序列化成JSON字符串
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="serializeData">需要序列化的对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.SerializeHelper.ParseJsonDateTime(System.String)">
            <summary>
            处理JsonString的时间格式问题【时间格式：yyyy-MM-dd HH:mm:ss】
            </summary>
            <param name="jsonString">Json字符串</param>
            <returns>处理好的Json字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.SerializeHelper.ParseJsonDateTime(System.String,System.String)">
            <summary>
            处理JsonString的时间格式问题
            <para>eg:ScriptSerializerHelper.ConvertTimeJson(@"[{'getTime':'\/Date(1419564257428)\/'}]", "yyyyMMdd hh:mm:ss");==>[{'getTime':'20141226 11:24:17'}]</para>
            </summary>
            <param name="jsonString">Json字符串</param>
            <param name="formart">时间格式化类型</param>
            <returns>处理好的Json字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.SerializeHelper.XmlDeserialize``1(System.String)">
            <summary>
            利用XmlSerializer来反序列化
            </summary>
            <param name="deserializeString">需要反序列化的字符串</param>
            <returns>对象</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.SerializeHelper.XmlSerialize``1(``0,System.String)">
            <summary>
            序列化，使用标准的XmlSerializer
            不能序列化IDictionary接口.
            </summary>
            <param name="serializeData">需要序列化的对象</param>
            <param name="filename">文件路径</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.SerializeHelper.XmlSerialize``1(``0)">
            <summary>
            序列化，使用标准的XmlSerializer
            不能序列化IDictionary接口.
            </summary>
            <param name="serializeData">需要序列化的对象</param>
            <returns>xml字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.SerializeHelper.XmlSerialize``1(``0,System.Text.Encoding)">
            <summary>
            序列化，使用标准的XmlSerializer
            不能序列化IDictionary接口.
            </summary>
            <param name="serializeData">需要序列化的对象</param>
            <param name="ecoding">xml字符串</param>
            <returns>xml字符串</returns>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Common.UserAgentHelper">
            <summary>
            UserAgent辅助操作类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.UserAgentHelper.GetBrowserName(System.String)">
            <summary>
            根据 UserAgent 获取浏览器名称
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Common.UserAgentHelper.GetOperatingSystemName(System.String)">
            <summary>
            根据 UserAgent 获取操作系统名称
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Enum.SerializationType">
            <summary>
            序列化方式
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Enum.SerializationType.Xml">
            <summary>
            Xml
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Enum.SerializationType.Json">
            <summary>
            json
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Enum.SerializationType.DataContract">
            <summary>
            DataContract
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Enum.SerializationType.Binary">
            <summary>
            Binary
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Enum.ImagePosition">
            <summary>
            水印位置
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Enum.ImagePosition.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Enum.ImagePosition.LeftTop">
            <summary>
            左上
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Enum.ImagePosition.LeftBottom">
            <summary>
            左下
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Enum.ImagePosition.RightTop">
            <summary>
            右上
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Enum.ImagePosition.RigthBottom">
            <summary>
            右下
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Enum.UploadFileSaveType">
            <summary>
            路径存储类型
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Enum.UploadFileSaveType.DateTimeNow">
            <summary>
            根据时间创建存储目录
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Enum.UploadFileSaveType.Code">
            <summary>
            根据ID编号方式来创建存储目录
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Lambda.RecursiveSelectLambda">
            <summary>
            Linq 递归查找
            </summary>
            时间：2016/7/12 15:27
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.RecursiveSelectLambda.RecursiveSelect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Linq 递归查找
            </summary>
            <typeparam name="TSource">泛型</typeparam>
            <param name="source">集合</param>
            <param name="childSelector">选择器</param>
            <returns>集合</returns>
            时间：2016/7/12 15:27
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.RecursiveSelectLambda.RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Linq 递归查找
            </summary>
            <typeparam name="TSource">泛型</typeparam>
            <typeparam name="TResult">泛型</typeparam>
            <param name="source">集合</param>
            <param name="childSelector">子集合选择器</param>
            <param name="selector">选择器</param>
            <returns>集合</returns>
            时间：2016/7/12 15:27
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.RecursiveSelectLambda.RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,``1})">
            <summary>
            Linq 递归查找
            </summary>
            <typeparam name="TSource">泛型</typeparam>
            <typeparam name="TResult">泛型</typeparam>
            <param name="source">集合</param>
            <param name="childSelector">子集合选择器</param>
            <param name="selector">选择器</param>
            <returns>集合</returns>
            时间：2016/7/12 15:27
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.RecursiveSelectLambda.RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,System.Int32,``1})">
            <summary>
            Recursives the select.
            </summary>
            <typeparam name="TSource">泛型</typeparam>
            <typeparam name="TResult">泛型</typeparam>
            <param name="source">集合</param>
            <param name="childSelector">子集合选择器</param>
            <param name="selector">选择器</param>
            <returns>集合</returns>
            时间：2016/7/12 15:27
            备注：
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Lambda.ReflectLambda">
            <summary>
            反射 帮助类
            </summary>
            时间：2016/8/31 17:27
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.ReflectLambda.GetPropertyDisplayName``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取属性的DisplayName
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="model">实体类对象</param>
            <param name="keySelector">选择表达式</param>
            <returns>DisplayName名称</returns>
            时间：2016/8/31 17:31
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.ReflectLambda.GetPropertyValue``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取属性的数值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="model">实体类对象</param>
            <param name="keySelector">选择表达式</param>
            <returns>属性的数值</returns>
            时间：2016/9/1 9:10
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.ReflectLambda.SetPropertyValue``2(``0,``1,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置属性的数值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <typeparam name="F">泛型</typeparam>
            <param name="model">实体类对象</param>
            <param name="value">设置的数值</param>
            <param name="keySelector">选择表达式</param>
            时间：2016/9/1 9:20
            备注：
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Lambda.DistinctLambda">
            <summary>
            Distinct/去重复项 帮助类
            </summary>
            创建时间:2015-05-27 9:28
            备注说明:<c>null</c>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.DistinctLambda.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            去重复
            <para>
            eg: Person[] _finded = _personList.Distinct'Person, string'(p => p.Name, StringComparer.InvariantCultureIgnoreCase).ToArray();
            </para>
            </summary>
            <typeparam name="T">泛型</typeparam>
            <typeparam name="V">泛型</typeparam>
            <param name="source">集合</param>
            <param name="keySelector">选择器</param>
            <returns></returns>
            创建时间:2015-05-27 9:28
            备注说明:<c>null</c>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.DistinctLambda.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            去重复
            </summary>
            <typeparam name="T">泛型</typeparam>
            <typeparam name="V">泛型</typeparam>
            <param name="source">集合</param>
            <param name="keySelector">选择器</param>
            <param name="comparer">IEqualityComparer</param>
            <returns></returns>
            创建时间:2015-05-27 9:28
            备注说明:<c>null</c>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Lambda.RecursiveJoinLambda">
            <summary>
            递归连接
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.RecursiveJoinLambda.RecursiveJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``2},``2})">
            <summary>
            递归连接
            </summary>
            <param name="source">集合</param>
            <param name="parentKeySelector">委托</param>
            <param name="childKeySelector">委托</param>
            <param name="resultSelector">委托</param>
            <returns>集合</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.RecursiveJoinLambda.RecursiveJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``2},``2})">
            <summary>
            递归连接
            </summary>
            <param name="source">集合</param>
            <param name="parentKeySelector">委托</param>
            <param name="childKeySelector">委托</param>
            <param name="resultSelector">委托</param>
            <returns>集合</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.RecursiveJoinLambda.RecursiveJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``2},``2},System.Collections.Generic.IComparer{``1})">
            <summary>
            递归连接
            </summary>
            <param name="source">集合</param>
            <param name="parentKeySelector">委托</param>
            <param name="childKeySelector">委托</param>
            <param name="resultSelector">委托</param>
            <param name="comparer">IComparer</param>
            <returns>集合</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.RecursiveJoinLambda.RecursiveJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``2},``2},System.Collections.Generic.IComparer{``1})">
            <summary>
            递归连接
            </summary>
            <param name="source">集合</param>
            <param name="parentKeySelector">委托</param>
            <param name="childKeySelector">委托</param>
            <param name="resultSelector">委托</param>
            <param name="comparer">IComparer</param>
            <returns>集合</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.RecursiveJoinLambda.RecursiveJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``2},``2})">
            <summary>
            递归连接
            </summary>
            <param name="source">集合</param>
            <param name="parentKeySelector">委托</param>
            <param name="childKeySelector">委托</param>
            <param name="resultSelector">委托</param>
            <returns>集合</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.RecursiveJoinLambda.RecursiveJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``2},``2},System.Collections.Generic.IComparer{``1})">
            <summary>
            递归连接
            </summary>
            <param name="source">集合</param>
            <param name="parentKeySelector">委托</param>
            <param name="childKeySelector">委托</param>
            <param name="resultSelector">委托</param>
            <param name="comparer">IComparer</param>
            <returns>集合</returns>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Lambda.WhereIfLambda">
            <summary>
            WhereIf 帮助类
            </summary>
            创建时间:2015-05-27 10:05
            备注说明:<c>null</c>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.WhereIfLambda.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Wheres if.
            <para>
            eg: var _result = _students.WhereIf(!string.IsNullOrEmpty(_name), c => c.Name == _name)
                                       .WhereIf(_age != 100, c => c.Age == _age).FirstOrDefault();
            </para>
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="source">集合</param>
            <param name="condition">成立条件</param>
            <param name="keySelector">选择器</param>
            <returns>集合</returns>
            时间：2015-12-10 14:47
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Lambda.WhereIfLambda.WhereIfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean})">
            <summary>
            当等于NULL或空的时候，执行选择器
            <para>
            eg: var _finded = PersonList.WhereIfNullOrEmpty(string.Empty, c => c.Name.Contains("yanzhiwei"));
            </para>
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="source">集合</param>
            <param name="condition">成立条件</param>
            <param name="keySelector">成立条件</param>
            <returns>集合</returns>
            创建时间:2015-05-27 10:19
            备注说明:<c>null</c>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Mapper.GeneralMapper">
            <summary>
            通用类型映射转换
            </summary>
            时间:2016/10/15 22:34
            备注:
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Mapper.GeneralMapper.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将集合导出为DataTable
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="data">需要导出的集合</param>
            <returns>DataTable</returns>
            时间:2016/10/15 23:16
            备注:
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Mapper.GeneralMapper.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.String[])">
            <summary>
            将集合导出为DataTable
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="data">需要导出的集合</param>
            <param name="propertyNameList">需要包含显示的实体类的属性</param>
            <returns>DataTable</returns>
            时间:2016/10/16 15:54
            备注:
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Mapper.GeneralMapper.ToList``1(System.Data.DataTable)">
            <summary>
            将DataTable导出成集合
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="table">需要导出的DataTable</param>
            <returns>集合</returns>
            时间:2016/10/15 22:41
            备注:
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Model.DataTablePageResult">
            <summary>
            Jquery DataTable分页结果集
            </summary>
            时间：2016-04-19 16:12
            备注：
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.DataTablePageResult.iTotalRecords">
            <summary>
            实际的行数
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.DataTablePageResult.iTotalDisplayRecords">
            <summary>
            过滤之后，实际的行数。
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.DataTablePageResult.aaData">
            <summary>
            数组的数组，表格中的实际数据。
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.DataTablePageResult.ExecuteMessage">
            <summary>
            错误提示消息
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.DataTablePageResult.ExecuteState">
            <summary>
            执行状态
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Model.UploadFileMessage">
            <summary>
            上传返回信息
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadFileMessage.HasError">
            <summary>
            上传错误
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadFileMessage.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadFileMessage.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadFileMessage.WebFilePath">
            <summary>
            网站路径
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadFileMessage.FileName">
            <summary>
            获取文件名
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Model.UploadFileConfig">
            <summary>
            文件上传参数配置
            </summary>
            时间：2015-12-17 11:11
            备注：
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadFileConfig.FileDirectory">
            <summary>
            文件保存路径
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadFileConfig.FileType">
            <summary>
            允许上传的文件类型, 逗号分割,必须全部小写!
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadFileConfig.MaxSizeM">
            <summary>
            允许上传多少大小
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadFileConfig.PathSaveType">
            <summary>
            路径存储类型
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadFileConfig.IsRenameSameFile">
            <summary>
            重命名同名文件?
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadFileConfig.IsUseOldFileName">
            <summary>
            是否使用原始文件名
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Model.UploadImageMessage">
            <summary>
            上传图片返回信息
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadImageMessage.Directory">
            <summary>
            图片目录
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadImageMessage.FileName">
            <summary>
            图片名
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadImageMessage.FilePath">
            <summary>
            文件物理路径
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadImageMessage.IsError">
            <summary>
            是否遇到错误
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadImageMessage.Message">
            <summary>
            反回消息
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadImageMessage.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Model.UploadImageMessage.WebPath">
            <summary>
            web路径
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Model.UploadImageMessage.SmallPath(System.Int32)">
            <summary>
            缩略图路径
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.WebClient.CNNWebClient">
            <summary>
            中国网站请求
            </summary>
            <seealso cref="T:System.Net.WebClient" />
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.WebClient.CNNWebClient.Timeout">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebClient.CNNWebClient.GetWebRequest(System.Uri)">
            <summary>
            重写GetWebRequest,添加WebRequest对象超时时间
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.CookiesManager`1">
            <summary>
            cookie 辅助类
            </summary>
            <typeparam name="T"></typeparam>
            时间：2015-12-18 11:33
            备注：
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.CookiesManager`1.lockObj">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.CookiesManager`1.instance">
            <summary>
            CookiesManager实例
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.CookiesManager`1.Item(System.String)">
            <summary>
            索引取值
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.CookiesManager`1.GetInstance">
            <summary>
            获取实例 （单例模式）
            </summary>
            <returns>CookiesManager</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.CookiesManager`1.Add(System.String,`0)">
            <summary>
            添加cookies ,注意value最大4K (默认1天)
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.CookiesManager`1.Add(System.String,`0,System.Int32)">
            <summary>
            添加cookies ,注意value最大4K
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="cookiesDurationInSeconds">有效时间单位秒</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.CookiesManager`1.ContainsKey(System.String)">
            <summary>
            是否包含该键
            </summary>
            <param name="key">键</param>
            <returns>是否包含</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.CookiesManager`1.Get(System.String)">
            <summary>
            按键取值
            </summary>
            <param name="key">键</param>
            <returns>对象</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.CookiesManager`1.GetAllKey">
            <summary>
            获取所有键集合
            </summary>
            <returns>集合</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.CookiesManager`1.Remove(System.String)">
            <summary>
            按键移除
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.CookiesManager`1.RemoveAll">
            <summary>
            移除所有
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.CookiesManager`1.RemoveAll(System.Func{System.String,System.Boolean})">
            <summary>
            移除所有
            </summary>
            <param name="keySelector">选择器</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.CookiesManager`1.Add(System.String,System.Int32,System.Web.HttpCookie,System.String,System.Web.HttpResponse)">
            <summary>
            添加
            </summary>
            <param name="key">键</param>
            <param name="cookiesDurationInSeconds">过期时间，单位秒</param>
            <param name="cookie">HttpCookie</param>
            <param name="setValue">值</param>
            <param name="response">HttpResponse</param>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebThumbnailImage">
            <summary>
            生成缩略图
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebThumbnailImage.MakeThumbnail(System.String,System.String,System.Int32,System.Int32)">
            <summary>
             生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebThumbnailImage.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean,YanZhiwei.DotNet3._5.Utilities.Enum.ImagePosition,System.String,System.Int32)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>
            <param name="isaddwatermark">是否添加水印</param>
            <param name="quality">图片品质</param>
            <param name="imagePosition">水印位置</param>
            <param name="waterImage">水印图片名称</param>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadFile">
            <summary>
            单文件上传
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadFile.#ctor">
            <summary>
            构造函数
            </summary>
            时间：2015-12-17 11:13
            备注：
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadFile.folderNumber">
            <summary>
            若以文件夹编号命名的时候，采用编号
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadFile.Save(System.Web.HttpPostedFile)">
            <summary>
            保存表单文件
            </summary>
            <param name="postFile">HttpPostedFile</param>
            <returns>上传返回信息</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadFile.Save(System.Web.HttpPostedFile,System.String)">
            <summary>
            保存表单文件,根据编号创建子文件夹
            </summary>
            <param name="postFile">HttpPostedFile</param>
            <param name="number">编号</param>
            <returns>上传返回信息</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadFile.SetFileDirectory(System.String)">
            <summary>
            文件保存路径(默认:/upload)
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadFile.SetFileType(System.String)">
            <summary>
            允许上传的文件类型, 逗号分割,必须全部小写! *表示所有 (默认值: .pdf,.xls,.xlsx,.doc,.docx,.txt,.png,.jpg,.gif )
            </summary>
            <param name="fileType">允许上传文件类型</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadFile.SetIsRenameSameFile(System.Boolean)">
            <summary>
            重命名同名文件？
            </summary>
            <param name="isRenameSameFile">true:重命名,false覆盖</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadFile.SetIsUseOldFileName(System.Boolean)">
            <summary>
            是否使用原始文件名作为新文件的文件名(默认:true)
            </summary>
            <param name="isUseOldFileName">true原始文件名,false系统生成新文件名</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadFile.SetMaxSizeM(System.Double)">
            <summary>
            允许上传多少大小(单位：M)
            </summary>
            <param name="maxSizeM">(单位：M)</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadFile.GetRelativePath(System.String)">
            <summary>
            根据物理路径获取相对路径
            </summary>
            <param name="fileDirectory">文件夹名称</param>
            <returns>相对路径</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadFile.CheckingType(YanZhiwei.DotNet3._5.Utilities.Model.UploadFileMessage,System.String)">
            <summary>
            验证文件类型
            </summary>
            <param name="message">上传返回信息.</param>
            <param name="fileName">文件名称.</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadFile.CheckSize(YanZhiwei.DotNet3._5.Utilities.Model.UploadFileMessage,System.Web.HttpPostedFile)">
            <summary>
            检查文件大小
            </summary>
            <param name="message">上传返回信息</param>
            <param name="postFile">HttpPostedFile</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadFile.CommonSave(System.Web.HttpPostedFile)">
            <summary>
            保存表单文件,根据HttpPostedFile
            </summary>
            <param name="postFile">HttpPostedFile</param>
            <returns>上传返回信息</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadFile.GetDirectory(System.String@)">
            <summary>
            获取目录
            </summary>
            <param name="webDir">网络目录名称</param>
            <returns>目录</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadFile.AddUploadFileMessage(YanZhiwei.DotNet3._5.Utilities.Model.UploadFileMessage,System.String)">
            <summary>
            抛出错误
            </summary>
            <param name="message">上传返回信息</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage">
            <summary>
            ASP.NET 图片上传
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.SetAllowFormat">
            <summary>
            允许图片格式
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.SetAllowSize">
            <summary>
            允许上传图片大小
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.SetCutImage">
            <summary>
            是否剪裁图片，默认true
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.SetLimitWidth">
            <summary>
            是否限制最大宽度，默认为true
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.SetMaxWidth">
            <summary>
            最大宽度尺寸，默认为600
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.SetMinWidth">
            <summary>
            限制图片最小宽度，0表示不限制
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.SetPicWater">
            <summary>
            图片水印
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.SetPositionWater">
            <summary>
            水印图片的位置 0居中、1左上角、2右上角、3左下角、4右下角
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.SetSmallImgHeight">
            <summary>
            缩略图高度多个逗号格开（例如:200,100）
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.SetSmallImgWidth">
            <summary>
            缩略图宽度多个逗号格开（例如:200,100）
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.SetWordWater">
            <summary>
            文字水印字符
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.FileCutSaveAs(System.Web.HttpPostedFile,System.String,System.Int32,System.Int32,YanZhiwei.DotNet2.Utilities.Enum.CutType)">
            <summary>
            裁剪图片
            </summary>
            <param name="postedFile">HttpPostedFile控件</param>
            <param name="savePath">保存路径</param>
            <param name="imgWidth">图片宽度</param>
            <param name="imgHeight">图片高度</param>
            <param name="cMode">剪切类型</param>
            <returns>返回上传信息</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.FileSaveAs(System.Web.HttpPostedFile,System.String)">
            <summary>
            通用图片上传类
            </summary>
            <param name="postedFile">HttpPostedFile控件</param>
            <param name="savePath">保存路径</param>
            <returns>返回上传信息</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.AddUploadImageMessage(YanZhiwei.DotNet3._5.Utilities.Model.UploadImageMessage,System.Int32)">
            <summary>
            增加上传错误信息
            </summary>
            <param name="rm">UploadImageMessage</param>
            <param name="code">错误代码</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.AddUploadImageMessage(YanZhiwei.DotNet3._5.Utilities.Model.UploadImageMessage,System.String)">
            <summary>
            增加上传错误信息
            </summary>
            <param name="rm">UploadImageMessage</param>
            <param name="message">错误信息</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebUploadImage.GetCodeMessage(System.Int32)">
            <summary>
            图片上传错误编码
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest">
            <summary>
            模拟Get，Post请求
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.accept">
            <summary>
            accept
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.allowAutoRedirect">
            <summary>
            是否允许重定向
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.contentType">
            <summary>
            contentType
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.cookie">
            <summary>
            设置cookie
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.time">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.HttpGet``1(System.String,YanZhiwei.DotNet3._5.Utilities.Enum.SerializationType)">
            <summary>
            向远程Url Get数据类
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="uri">请求URL地址</param>
            <param name="serializationType">序列化方式</param>
            <returns>反序列化对象</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.HttpGet(System.String)">
            <summary>
            向远程Url Get数据类
            </summary>
            <param name="uri">请求URL地址</param>
            <returns>响应字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.HttpPost``1(System.String,System.Object,YanZhiwei.DotNet3._5.Utilities.Enum.SerializationType)">
            <summary>
            向远程Url Post数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="uri">请求URL地址</param>
            <param name="data">请求参数</param>
            <param name="serializationType">序列化方式</param>
            <returns>反序列化对象</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.HttpPost(System.String,System.Object,YanZhiwei.DotNet3._5.Utilities.Enum.SerializationType)">
            <summary>
            向远程Url Post数据
            </summary>
            <param name="uri">请求URL地址</param>
            <param name="data">请求参数</param>
            <param name="serializationType">参数序列化方式</param>
            <returns>响应字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.HttpPost(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            向远程Url Post数据
            </summary>
            <param name="uri">请求URL地址</param>
            <param name="data">请求参数</param>
            <returns>响应字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.GetResponseImage(System.String)">
            <summary>
            获得响应中的图像
            </summary>
            <param name="url">链接</param>
            <returns>若发生异常则返回NULL</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.HttpUploadFile(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            POST文件
            </summary>
            <param name="url">链接</param>
            <param name="file">文件路径</param>
            <param name="postParamters"></param>
            <returns>Html</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.HttpUploadFile(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            POST文件
            </summary>
            <param name="url">链接</param>
            <param name="file">文件路径</param>
            <param name="postParamters">参数</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.HttpUploadFile(System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            POST文件
            </summary>
            <param name="url">链接</param>
            <param name="files">文件路径</param>
            <param name="postParamters">参数</param>
            <returns>Html</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.HttpUploadFile(System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            POST文件
            </summary>
            <param name="url">链接</param>
            <param name="files">文件路径</param>
            <param name="postParamters">参数</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.SetAccept(System.String)">
            <summary>
            设置accept(默认:*/*)
            </summary>
            <param name="accept"></param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.SetContentType(System.String)">
            <summary>
            设置contentType(默认:application/x-www-form-urlencoded)
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.SetCookie(System.Net.CookieContainer)">
            <summary>
            设置Cookie
            </summary>
            <param name="cookie"></param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.SetIsAllowAutoRedirect(System.Boolean)">
            <summary>
            是否允许重定向(默认:true)
            </summary>
            <param name="allowAutoRedirect"></param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.SetTimeOut(System.Int32)">
            <summary>
            设置请求过期时间（单位：毫秒）（默认：5000）
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.Core.WebRequest.RemoteCertificateValidate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            远程证书验证，固定返回true
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.WebForm.HandlerHelper">
            <summary>
            HttpHandler帮助类
            </summary>
            创建时间:2015-06-08 11:46
            备注说明:<c>null</c>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.HandlerHelper.CreateFilePath(System.Web.HttpContext,System.String)">
            <summary>
            创建文件全路径
            <para>eg: context.CreateFilePath("images/1616/LampGroup/lampGroup.jpg")</para>
            </summary>
            <param name="context">HttpContext</param>
            <param name="file">The file.eg:"images/1616/LampGroup/lampGroup.jpg"</param>
            <returns>文件路径</returns>
            创建时间:2015-06-09 11:15
            备注说明:<c>null</c>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.HandlerHelper.CreateResponse(System.Web.HttpContext,System.Object,YanZhiwei.DotNet2.Utilities.Enum.AjaxResultType,System.String)">
            <summary>
            创建Ajax响应
            </summary>
            <param name="context">HttpContext</param>
            <param name="data">返回数据</param>
            <param name="type">Ajax操作结果类型</param>
            <param name="content">消息内容</param>
            时间：2016/10/26 10:15
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.HandlerHelper.CreateResponse(System.Web.HttpContext,System.String)">
            <summary>
            创建Ajax响应
            </summary>
            <param name="context">HttpContext</param>
            <param name="content">消息内容</param>
            时间：2016/10/26 10:18
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.HandlerHelper.Set304Cache(System.Web.HttpContext)">
            <summary>
            自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。
            </summary>
            <param name="context">HttpContext</param>
            时间：2016/8/23 9:05
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.HandlerHelper.GetImageContentType(System.String)">
            <summary>
            获取图片类型contentType
            </summary>
            <param name="ext">文件后缀</param>
            <returns>contentType</returns>
            时间：2016/8/23 9:31
            备注：
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.WebForm.JqueryPlugin.DataTableHelper">
            <summary>
            Jquery DataTables帮助类
            </summary>
            时间：2016-04-19 16:04
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.JqueryPlugin.DataTableHelper.ExecutePageQuery``1(System.Web.HttpContext,System.Func{System.Int32,System.Int32,System.Int32,System.String,YanZhiwei.DotNet3._5.Utilities.Model.DataTablePageResult})">
            <summary>
            数据分页
            </summary>
            <param name="context">HttpContext</param>
            <param name="getDataFactory">委托，顺位输入参数：1.用于指定一屏显示的条数，需开启分页器;2.用于指定从哪一条数据开始显示到表格中去，3.排序列索引;4.升序还是降序，返回DataTablePageResult</param>
            时间：2016-04-19 16:35
            备注：
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.WebForm.HyperlinkHelper">
            <summary>
            URL帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.WebForm.HyperlinkHelper.SetQueryString(System.String,System.Object)">
            <summary>
            在url里添加参数，并返回添加后的url
            </summary>
            <param name="name">键</param>
            <param name="value">值</param>
            <returns>更新后链接</returns>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Encryptor.AESEncryptor">
            <summary>
            AES加密
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Encryptor.AESEncryptor.aes">
            <summary>
            ASE对象
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Encryptor.AESEncryptor.#ctor(System.Byte[],System.Byte[])">
            <summary>
            构造函数
            </summary>
            <param name="key">密钥.</param>
            <param name="iv">向量.</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Encryptor.AESEncryptor.CreateAES(System.String)">
            <summary>
            根据KEY生成DES
            </summary>
            <param name="key">密钥.</param>
            <returns>Aes</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Encryptor.AESEncryptor.CreateAES">
            <summary>
            创建ASE加密对象
            </summary>
            <returns>Aes</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Encryptor.AESEncryptor.DecryptString(System.String)">
            <summary>
            解密
            </summary>
            <param name="text">需要解密的字符串</param>
            <returns>解密后字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Encryptor.AESEncryptor.EncryptString(System.String)">
            <summary>
            加密
            </summary>
            <param name="text">需要加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Core.CommonEqualityComparer`2">
            <summary>
            定义方法以支持对象的相等比较
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            创建时间:2015-05-27 9:23
            备注说明:<c>null</c>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.CommonEqualityComparer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:YanZhiwei.DotNet3._5.Utilities.Core.CommonEqualityComparer`2"/> class.
            </summary>
            <param name="keySelector">The key selector.</param>
            <param name="comparer">The comparer.</param>
            时间：2015-12-10 14:50
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.CommonEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:YanZhiwei.DotNet3._5.Utilities.Core.CommonEqualityComparer`2"/> class.
            </summary>
            <param name="keySelector">The key selector.</param>
            时间：2015-12-10 14:50
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.CommonEqualityComparer`2.Equals(`0,`0)">
            <summary>
            Equalses the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
            时间：2015-12-10 14:50
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.CommonEqualityComparer`2.GetHashCode(`0)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            时间：2015-12-10 14:50
            备注：
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Core.Job">
            <summary>
            任务帮助类
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Core.Job.jobFactory">
            <summary>
            TimerCallback 对象
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Core.Job.lastExecuteTime">
            <summary>
            上次执行时间
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Core.Job.nextExecuteTime">
            <summary>
            下次执行时间
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Core.Job.schedule">
            <summary>
            ISchedule 对象
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Core.Job.taskName">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Core.Job.timer">
            <summary>
            Timer 对象
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.Job.#ctor(System.Threading.TimerCallback,YanZhiwei.DotNet3._5.Interfaces.ISchedule,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="callback">一个TimerCallback 委托，表示要执行的方法.</param>
            <param name="schedule">为每个任务制定一个执行计划</param>
            <param name="taskName">任务名称</param>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Core.Job.LastExecuteTime">
            <summary>
            该任务最后一次执行的时间
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Core.Job.Name">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Core.Job.NextExecuteTime">
            <summary>
            任务下执行时间
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Core.Job.Shedule">
            <summary>
            执行任务的计划
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.Job.Close">
            <summary>
            销毁任务
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.Job.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.Job.RefreshSchedule">
            <summary>
            刷新任务计划
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.Job.Start">
            <summary>
            开始任务
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.Job.Start(System.Object)">
            <summary>
            开始任务
            </summary>
            <param name="arg">回调参数</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.Job.Stop">
            <summary>
            停止任务
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.Job.ToString">
            <summary>
            ToString--返回任务名称
            </summary>
            <returns>任务名称</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.Job.JobExecute(System.Object)">
            <summary>
            执行任务
            </summary>
            <param name="state">任务函数参数</param>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Core.JobScheduler">
            <summary>
            任务管理中心
            使用它可以管理一个或则多个同时运行的任务
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet3._5.Utilities.Core.JobScheduler.taskScheduler">
            <summary>
            任务线程安全集合
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.JobScheduler.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Core.JobScheduler.Count">
            <summary>
            任务总数
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.JobScheduler.DeRegister(YanZhiwei.DotNet3._5.Utilities.Core.Job)">
            <summary>
            移除任务
            </summary>
            <param name="task">Task</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.JobScheduler.Find(System.String)">
            <summary>
            查找任务
            </summary>
            <param name="name">任务名称</param>
            <returns>Task</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.JobScheduler.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.JobScheduler.Register(YanZhiwei.DotNet3._5.Utilities.Core.Job)">
            <summary>
            注册任务
            </summary>
            <param name="task">Task</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.JobScheduler.TerminateAllTask">
            <summary>
            终止任务
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Core.SchedulerType.CycExecution">
            <summary>
            周期性的执行计划
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.SchedulerType.CycExecution.#ctor(System.TimeSpan)">
            <summary>
            构造函数,马上开始运行
            </summary>
            <param name="period">周期时间</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.SchedulerType.CycExecution.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            构造函数，在一个将来时间开始运行
            </summary>
            <param name="shedule">计划执行的时间</param>
            <param name="period">周期时间</param>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Core.SchedulerType.CycExecution.DueTime">
            <summary>
             该计划还有多久才能运行[毫秒]
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Core.SchedulerType.CycExecution.ExecutionTime">
            <summary>
            计划执行时间
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Core.SchedulerType.CycExecution.Period">
            <summary>
            周期[毫秒]
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Core.SchedulerType.ImmediateExecution">
            <summary>
            计划立即执行任务
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Core.SchedulerType.ImmediateExecution.DueTime">
            <summary>
            该计划还有多久才能运行[毫秒]
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Core.SchedulerType.ImmediateExecution.ExecutionTime">
            <summary>
            任务执行时间
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Core.SchedulerType.ImmediateExecution.Period">
            <summary>
            周期[毫秒]
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Core.SchedulerType.ScheduleExecutionOnce">
            <summary>
            计划在某一未来的时间执行一个操作一次，如果这个时间比现在的时间小，就变成了立即执行的方式
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.SchedulerType.ScheduleExecutionOnce.#ctor(System.DateTime)">
            <summary>
            构造函数
            </summary>
            <param name="time">计划开始执行的时间</param>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Core.SchedulerType.ScheduleExecutionOnce.DueTime">
            <summary>
             该计划还有多久才能运行[毫秒]
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Core.SchedulerType.ScheduleExecutionOnce.ExecutionTime">
            <summary>
            计划执行时间
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.Core.SchedulerType.ScheduleExecutionOnce.Period">
            <summary>
            计划周期[毫秒]
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.Core.NotifyPropertyChanged">
            <summary>
            向客户端发出某一属性值已更改的通知。
            </summary>
        </member>
        <member name="E:YanZhiwei.DotNet3._5.Utilities.Core.NotifyPropertyChanged.PropertyChanged">
            <summary>
            向客户端发出某一属性值已更改的通知事件
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.Core.NotifyPropertyChanged.NotifyChanged(System.String)">
            <summary>
            需要向客户端通知的属性名称
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.ScriptConverter.CNDateTimeConverter">
            <summary>
            时间类型转换器
            </summary>
            时间：2015-12-10 14:48
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.ScriptConverter.CNDateTimeConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YanZhiwei.DotNet3._5.Utilities.ScriptConverter.CNDateTimeConverter"/> class.
            </summary>
            时间：2015-12-10 14:49
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.ScriptConverter.CNDateTimeConverter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YanZhiwei.DotNet3._5.Utilities.ScriptConverter.CNDateTimeConverter"/> class.
            </summary>
            <param name="customFormat">The custom format.</param>
            时间：2015-12-10 14:49
            备注：
        </member>
        <member name="P:YanZhiwei.DotNet3._5.Utilities.ScriptConverter.CNDateTimeConverter.SupportedTypes">
            <summary>
            When overridden in a derived class, gets a collection of the supported types.
            </summary>
            时间：2015-12-10 14:49
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.ScriptConverter.CNDateTimeConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            Deserializes the specified dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="type">The type.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
            时间：2015-12-10 14:49
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.ScriptConverter.CNDateTimeConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
            时间：2015-12-10 14:49
            备注：
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.XAML.ControlHelper">
            <summary>
            Control 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.XAML.ControlHelper.FullScreen(System.Windows.Window)">
            <summary>
            窗体全屏
            eg:MetroWindow_Loaded事件中使用
            </summary>
            <param name="windows">Window</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.XAML.ControlHelper.SetHeightAuto``1(``0)">
            <summary>
            将WPF控件告诉设置为auto
            </summary>
            <typeparam name="T">控件泛型</typeparam>
            <param name="t">控件</param>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.XAML.ControlHelper.SetWidthAuto``1(``0)">
            <summary>
            将WPF控件宽度设置为auto【线程安全】
            </summary>
            <typeparam name="T">控件泛型</typeparam>
            <param name="t">控件</param>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.XAML.DispatcherHelper">
            <summary>
            Dispatcher帮助类
            参考
            http://blog.decarufel.net/2009/03/good-practice-to-use-dispatcher-in-wpf-background-thread.html
            http://msdn.microsoft.com/zh-tw/magazine/cc163328.aspx
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.XAML.DispatcherHelper.Dispatch``1(System.Windows.Threading.DispatcherObject,System.Func{``0})">
            <summary>
            Dispatch
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.XAML.DispatcherHelper.Dispatch``2(``0,System.Func{``0,``1})">
            <summary>
            Dispatch
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.XAML.DispatcherHelper.Dispatch``3(``0,System.Func{``0,``1,``2},``1)">
            <summary>
            Dispatch
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.XAML.DispatcherHelper.Dispatch``4(``0,System.Func{``0,``1,``2,``3},``1,``2)">
            <summary>
            Dispatch
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.XAML.DispatcherHelper.Dispatch``5(``0,System.Func{``0,``1,``2,``3,``4},``1,``2,``3)">
            <summary>
            Dispatch
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.XAML.DispatcherHelper.Dispatch(System.Windows.Threading.DispatcherObject,System.Action)">
            <summary>
            Dispatch
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.XAML.DispatcherHelper.Dispatch``1(``0,System.Action{``0})">
            <summary>
            Dispatch
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.XAML.DispatcherHelper.Dispatch``2(``0,System.Action{``0,``1},``1)">
            <summary>
            Dispatch
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.XAML.DispatcherHelper.Dispatch``3(``0,System.Action{``0,``1,``2},``1,``2)">
            <summary>
            Dispatch
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.XAML.DispatcherHelper.Dispatch``4(``0,System.Action{``0,``1,``2,``3},``1,``2,``3)">
            <summary>
            Dispatch
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet3._5.Utilities.XAML.NotificationObject">
            <summary>
            绑定数据属性。这个类的作用是实现了INotifyPropertyChanged接口。WPF中类要实现这个接口，其属性成员才具备通知UI的能力，数据绑定。
            </summary>
            时间：2016/7/4 16:41
            备注：
        </member>
        <member name="E:YanZhiwei.DotNet3._5.Utilities.XAML.NotificationObject.PropertyChanged">
            <summary>
            属性数值更新事件
            </summary>
            时间：2016/7/4 16:41
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet3._5.Utilities.XAML.NotificationObject.RaisePropertyChanged(System.String)">
            <summary>
            触发属性数值更新事件
            </summary>
            <param name="propertyName">Name of the property.</param>
            时间：2016/7/4 16:41
            备注：
        </member>
    </members>
</doc>
