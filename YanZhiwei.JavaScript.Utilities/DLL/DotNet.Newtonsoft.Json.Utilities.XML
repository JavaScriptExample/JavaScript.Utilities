<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNet.Newtonsoft.Json.Utilities</name>
    </assembly>
    <members>
        <member name="T:YanZhiwei.DotNet.Newtonsoft.Json.Utilities.DataRowConverter">
            <summary>
            DataRowConverter转换器
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet.Newtonsoft.Json.Utilities.DataRowConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            重写WriteJson
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet.Newtonsoft.Json.Utilities.DataRowConverter.CanConvert(System.Type)">
            <summary>
            override CanConvert
            </summary>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet.Newtonsoft.Json.Utilities.DataRowConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            override ReadJson
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="ser"></param>
            <returns></returns>
        </member>
        <member name="T:YanZhiwei.DotNet.Newtonsoft.Json.Utilities.DataSetConverter">
            <summary>
            DataSetConverter转换器
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet.Newtonsoft.Json.Utilities.DataSetConverter.CanConvert(System.Type)">
            <summary>
            override CanConvert
            </summary>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet.Newtonsoft.Json.Utilities.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            override ReadJson
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="ser"></param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet.Newtonsoft.Json.Utilities.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            override WriteJson
            </summary>
            <param name="writer"></param>
            <param name="dataset"></param>
            <param name="ser"></param>
        </member>
        <member name="T:YanZhiwei.DotNet.Newtonsoft.Json.Utilities.DataTableConverter">
            <summary>
            DataTableConverter转换器
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet.Newtonsoft.Json.Utilities.DataTableConverter.CanConvert(System.Type)">
            <summary>
            override CanConvert
            </summary>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet.Newtonsoft.Json.Utilities.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            override ReadJson
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="ser"></param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet.Newtonsoft.Json.Utilities.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            override WriteJson
            </summary>
            <param name="writer"></param>
            <param name="dataTable"></param>
            <param name="ser"></param>
        </member>
        <member name="T:YanZhiwei.DotNet.Newtonsoft.Json.Utilities.JsonHelper">
            <summary>
            Json 辅助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet.Newtonsoft.Json.Utilities.JsonHelper.Deserialize``1(System.String)">
            <summary>
            反序列化Json数据格式
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="jsonText">Json文本</param>
            <returns>反序列化</returns>
        </member>
        <member name="M:YanZhiwei.DotNet.Newtonsoft.Json.Utilities.JsonHelper.Serialize(System.Object)">
            <summary>
            序列化数据为Json数据格式.
            </summary>
            <param name="value">需要序列化对象</param>
            <returns>Json</returns>
        </member>
    </members>
</doc>
